#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import textwrap
import json
import urllib2
import argparse

def weather(dat, day_idx, metric=False):
    """Assemble weather data
    """
    data = dat['forecast']['txt_forecast']['forecastday'][day_idx]
    day = data['title']
    forecast = data['fcttext_metric'] if metric else data['fcttext']
    temps = dat['forecast']['simpleforecast']['forecastday'][day_idx]
    high = temps['high']['celsius'] if metric else temps['high']['fahrenheit']
    low = temps['low']['celsius'] if metric else temps['low']['fahrenheit']

    return day, forecast, high, low


def cli_format(d, metric=False):
    """Format weather data
    """
    forecast = '\n'.join(textwrap.wrap(d[1], 60))
    temp = '{loc}\n{delim}\n\nHigh {high}{deg}, Low {low}{deg}\n\n{forecast}\n'
    out = temp.format(loc=d[0], 
                      forecast=forecast, 
                      high=d[2], 
                      low=d[3], 
                      delim=60*'=',
                      deg='°C' if metric else '°F')
    return out


def main():
    """Output weather data
    """

    parser = argparse.ArgumentParser(description='weather forecast tool')
    parser.add_argument("-k", help="required api key used to query wunderground api", required=True, action='store', dest='wunderground_key')
    parser.add_argument("-z", help="required zip for weather data", type=int, required=True, action='store', dest='zip_code')
    parser.add_argument("-c", help="optional; use celsius", required=False, action='store_true', default=False, dest='celsius')
    args = parser.parse_args()
    metric = args.celsius

    wunder_data = {'base_url': 'http://api.wunderground.com/api/',
                   'key': args.wunderground_key,
                   'query': '/conditions/forecast10day/q/',
                   'zip': args.zip_code}

    url = '{base_url}{key}{query}{zip}.json'.format(**wunder_data)
    r = json.load(urllib2.urlopen(url))
    location = r['current_observation']['display_location']['full']
    print '\n{0}\n'.format(location)

    times = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
    for time in times:
        weather_data = weather(r, time, metric)
        cli_output = cli_format(weather_data, metric)
        print cli_output

if __name__ == '__main__':
    main()
